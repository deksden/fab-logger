# .env.example
# Конфигурация для @fab33/fab-logger v2.0.0
# Используется "умной" оберткой, доступной по импорту '@fab33/fab-logger/env'.

# -----------------------------------------------------------------------------
# 1. Глобальные настройки
# -----------------------------------------------------------------------------

# Глобальный минимальный уровень логов. Сообщения ниже этого уровня будут отброшены.
# (trace, debug, info, warn, error, fatal)
LOG_LEVEL=info

# Фильтрация по namespace. Использует синтаксис пакета `debug`.
# Примеры:
# DEBUG=*                    -> Показать все
# DEBUG=app:*                -> Показать все, что начинается с "app:"
# DEBUG=app:*, -app:db       -> Показать все "app", кроме "app:db"
# DEBUG=api,worker           -> Показать только "api" и "worker"
DEBUG=*

# -----------------------------------------------------------------------------
# 2. Настройка транспортов
# -----------------------------------------------------------------------------
# Вы можете определить несколько транспортов (пунктов назначения) для логов.
# Система ищет переменные TRANSPORT1, TRANSPORT2, ... и т.д.

# ТРАНСПОРТ 1: Красивый вывод в консоль
# Требует установки `pino-pretty`.
TRANSPORT1=pretty
TRANSPORT1_ENABLED=true
TRANSPORT1_LEVEL=debug      # Уровень для этого конкретного транспорта
TRANSPORT1_COLORS=true      # Цветной вывод
TRANSPORT1_TRANSLATE_TIME=SYS:standard  # Формат времени
TRANSPORT1_IGNORE=pid,hostname  # Игнорируемые поля
TRANSPORT1_SINGLE_LINE=false    # Однострочный вывод

# ТРАНСПОРТ 2: Запись всех логов в файл
# Использует встроенный в Node.js модуль `fs`.
TRANSPORT2=file
TRANSPORT2_ENABLED=true
TRANSPORT2_LEVEL=info
TRANSPORT2_FOLDER=logs      # Папка для логов
TRANSPORT2_FILENAME=app.log # Имя файла
TRANSPORT2_MKDIR=true       # Создавать папку, если не существует
TRANSPORT2_APPEND=true      # Дописывать в существующий файл

# ТРАНСПОРТ 3: Отдельный файл только для ошибок
TRANSPORT3=file
TRANSPORT3_ENABLED=true
TRANSPORT3_LEVEL=error      # Только ошибки и выше
TRANSPORT3_FOLDER=logs
TRANSPORT3_FILENAME=errors.log

# ТРАНСПОРТ 4: Простой консольный вывод (без зависимостей)
# Идеально для serverless-сред (Vercel, Next.js RSC), где воркеры могут не работать.
# Этот транспорт гарантированно работает в любом окружении.
# TRANSPORT4=console-simple
# TRANSPORT4_ENABLED=false
# TRANSPORT4_LEVEL=trace

# ТРАНСПОРТ 5: Вывод критических ошибок в stderr
TRANSPORT5=file
TRANSPORT5_ENABLED=false     # По умолчанию отключен
TRANSPORT5_LEVEL=fatal
TRANSPORT5_DESTINATION=2    # 1=stdout, 2=stderr. Игнорирует FOLDER и FILENAME.

# -----------------------------------------------------------------------------
# 3. Настройки отладки самого логгера
# -----------------------------------------------------------------------------

# Включите эту переменную, чтобы видеть внутренние логи работы fab-logger.
# Помогает понять, как парсится конфигурация и создаются транспорты.
# DEBUG_LOGGER=true
